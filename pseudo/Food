/*********************************************************************
 * CLASS Food
 * AUTHOR Jhi Morris
 * DATE CREATED 02/05/18
 * DATE LAST EDITED 25/05/18
 * PURPOSE Food object superclass. Validates that strings are not-null
 *         and defines some abstract methods.
 *********************************************************************/
IMPLEMENTS IFood Interface

CLASSFIELDS:
  name (String)
  storageTemp (Real)
  packaging (String)

CONSTRUCTORS:

  default:
  IMPORTS: none
    setName <- ""
    setStorageTemp <- 21.0
    setPackaging <- ""

  alternate:
  IMPORTS: name (String), storageTemp (Real), packaging (String)
    setName <- name
    setStorageTemp <- storageTemp
    setPackaging <- packaging

  copy:
  IMPORTS: foodIn (Food object)
    setName <- foodIn getName <- none
    setStorageTemp <- foodIn getStorageTemp <- none
    setPackaging <- foodIn getPackaging <- none
END CONSTRUCTORS

SETTERS:

  setStorageTemp
  IMPORTS: storageTemp (Real)
    IF storageTemp <= 25.0 AND storageTemp >= -27.0
      CLASSFIELD storageTemp := storageTemp
    ELSE
      FAIL IllegalArgumentException "Error: Temperature out of range."
    END ELSE

  setName
  IMPORTS: name (String)
    IF name NOT NULL
      CLASSFIELD storageTemp := storageTemp
    ELSE
      FAIL IllegalArgumentException "Error: Name is null."
    END ELSE

  setPackaging
  IMPORTS: packaging (String)
    IF packaging NOT NULL
      CLASSFIELD packaging := packaging
    ELSE
      FAIL IllegalArgumentException "Error: Packaging is null."
    END ELSE
END SETTERS

GETTERS:

  getStorageTemp
  EXPORTS: storageTemp (Real)

  getName
  EXPORTS: name (String)

  getPackaging
  EXPORTS: packaging (String)
END GETTERS

SUBMODULE: equals
IMPORTS: objIn (Object)
EXPORTS: equals (Boolean)
ALGORITHM:
  equals := FALSE

  IF objIn IS A Food
    foodIn := objIn TO Food

    IF (foodIn getName <- none EQUALS getName <- none AND
      foodIn getStorageTemp <- none EQUALS getStorageTemp() AND
      foodIn getPackaging <- none EQUALS getPackaging <- none)

      equals := TRUE
    END IF
  END IF
END SUBMODULE

SUBMODULE: isExpired
IMPORTS: expDate (Date object)
EXPORTS: expired (Boolean)
ALGORITHM:
  today := DATE NOW

  IF expDate IS AFTER today
    expired := FALSE
  ELSE
    expired := TRUE
  END ELSE
END SUBMODULE

SUBMODULE: calcSpace
IMPORTS: food (Food object)
EXPORTS: space (Integer)
ALGORITHM:
  IF food IS A Fruit
    space := TO INTEGER (1.95 * food getNumPiece <- none) ROUNDED UP
  ELSE
    IF food IS A Meat
      space := TO INTEGER (0.86 * food getWeight <- none) ROUNDED UP
    ELSE
      IF food IS A Grain
        space := TO INTEGER food getVolume <- none ROUNDED UP
      ELSE
        IF food IS A Vegetable
          space := TO INTEGER (1.025 * food getWeight <- none) ROUNDED UP
        ELSE
          FAIL IllegalStateException "Error: Unknown Food type."
        END ELSE
      END ELSE
    END ELSE
  END ELSE
END SUBMODULE

ABSTRACT SUBMODULE: clone
IMPORTS: none
EXPORTS: Food object
ASSERTION: Exports a deep copy of the Food object

ABSTRACT SUBMODULE: toString
IMPORTS: none
EXPORTS: String
ASSERTION: Reports attributes of Food object as a human-readible string

ABSTRACT SUBMODULE: calcExpiry
IMPORTS: none
EXPORTS: Boolean
ASSERTION: Checks expiry using today's date as generated by system and
  exports true if the food item has reached its expiry date.

ABSTRACT SUBMODULE: toCSV
IMPORTS: none
EXPORTS: String
ASSERTION: Reports attriutes of Food objects as CSV-compatible format string 
