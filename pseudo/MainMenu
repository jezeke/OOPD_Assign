/*********************************************************************
 * CLASS MainMenu
 * AUTHOR Jhi Morris
 * DATE CREATED 02/05/18
 * DATE LAST EDITED 29/05/18
 * PURPOSE Displays menu options and calls on operations to allow user
 *         to control all facilities of the program.
 *********************************************************************/

CLASSFIELDS:
  util (TerminalUtility)
  fio (FileIO)

CONSTRUCTORS:

  default:
  util := CONSTRUCT TerminalUtility USING default
  fio := CONSTRUCT FileIO USING default
END CONSTRUCTORS

SUBMODULE: menuStart
IMPORTS: none
EXPORTS: none
ALGORITHM:
  exit := FALSE

  DO
    choice := util menuSelect <- ("+|FoodVend Management Terminal|+" + NEWLINE +
      "Please select a menu option from below:" + NEWLINE +
      "[1] Add Food" + NEWLINE + "[2] Remove Food" + NEWLINE +
      "[3] Display Contents" + NEWLINE + "[4] Find Expired" + NEWLINE +
      "[5] Read IN Storage" + NEWLINE + "[6] Write OUT Storage" + NEWLINE +
      "[0] Exit"), NULL, 6

    CASE choice
      1: addFood <- none
      2: removeFood <- none
      3: displayContents <- none
      4: findExpired <- none
      5: readIn <- none
      6: writeOut <- none
      0: exit := TRUE
         OUTPUT "Exiting FoodVend Management Terminal."
    END CASE
  WHILE NOT exit
END SUBMODULE

SUBMODULE: addFood
IMPORTS: none
EXPORTS: none
ALGORITHM:
  exit := FALSE
  err := NULL

  IF (fio isLoaded <- none)
    DO
      IF err NOT NULL AND err EQUALS "" //if it worked last loop
        OUTPUT "Food added successfully"
      END IF

      choice := util menuSelect <- ("+|Add Food|+" + NEWLINE +
        "Please select a menu option from below:" + NEWLINE +
        "[1] Meat" + NEWLINE + "[2] Vegetables" + NEWLINE +
        "[3] Grain" + NEWLINE + "[4] Fruit" + NEWLINE +
        "[0] Return to Main Menu"), err, 4
      err := ""

      TRY
        CASE choice
          1: addMeat <- none
          2: addVege <- none
          3: addGrain <- none
          4: addFruit <- none
          0: exit := true
        END CASE
      CATCH ParseException
        err := "Error: Invalid date."
      CATCH NumberFormatException
        err := "Error: Invalid number input."
      CATCH Exception
        err := EXCEPTION MESSAGE
      END TRYCATCH
    WHILE NOT exit
  ELSE
    storaeLackError <- none
  END ELSE
END SUBMODULE

SUBMODULE: addMeat
IMPORTS: none
EXPORTS: none
ALGORITHM:
  name := util inputString <- "Please input meat name:" + NEWLINE
  cut := util inputString <- "Please input meat cut:" + NEWLINE
  weight := util inputString <- "Please input meat weight:" + NEWLINE
  temp := util inputString <- "Please input storage temperature:" + NEWLINE
  useby := util inputString <-
    "Please input use-by date DD/MM/YYYY" + NEWLINE
  packaging := util inputString <- "Please input meat packaging:" + NEWLINE

  fio addFood <- {"Meat", name, cut, weight, temp, useby, packaging}
END SUBMODULE

SUBMODULE: addVege
IMPORTS: none
EXPORTS: none
ALGORITHM:
  name := util inputString <- "Please input vegetable name:" + NEWLINE
  weight := util inputString <- "Please input vegetable weight:" + NEWLINE
  temp := util inputString <- "Please input storage temperature:" + NEWLINE
  bestBefore := util inputString <-
    "Please input best before date DD/MM/YYYY:" + NEWLINE
  packaging := util inputString <- "Please input vegetable packaging:"

  fio addFood <- {"Vegetable", name, weight, temp, bestBefore, packaging}
END SUBMODULE

SUBMODULE: addGrain
IMPORTS: none
EXPORTS: none
ALGORITHM:
  name := util inputString <- "Please input grain name:" + NEWLINE
  type := util inputString <- "Please input grain type:" + NEWLINE
  volume := util inputString <- "Please input grain weight:" + NEWLINE
  temp := util inputString <- "Please input storage temperature:" + NEWLINE
  bestBefore := util inputString <-
    "Please input best before date DD/MM/YYYY:" + NEWLINE
  packaging := util inputString <- "Please input grain packaging:" + NEWLINE

  fio addFood <- {"Grain", name, type, volume, temp, bestBefore, packaging}
END SUBMODULE

SUBMODULE: addGrain
IMPORTS: none
EXPORTS: none
ALGORITHM:
  name := util inputString <- "Please input fruit name:" + NEWLINE
  type := util inputString <- "Please input fruit type:" + NEWLINE
  numPiece := util inputString <- "Please input number of pieces:" + NEWLINE
  temp := util inputString <- "Please input storage temperature:" + NEWLINE
  useby := util inputString <-
    "Please input useby date DD/MM/YYYY:" + NEWLINE
  packaging := util inputString <- "Please input fruit packaging:" + NEWLINE

  fio addFood <- {"Fruit", name, type, numPiece, temp, useby, packaging}
END SUBMODULE

SUBMODULE: removeFood
IMPORTS: none
EXPORTS: none
ALGORITHM:
  exit := FALSE

  IF fio isLoaded <- none
    DO
      choice := util menuSelect <- ("+|Remove Food|+" + NEWLINE +
        "Please select a location from below:" + NEWLINE +
        "[1] Freezer" + NEWLINE + "[2] Fridge" + NEWLINE +
        "[3] Pantry" + NEWLINE + "[0] Return to Main Menu"), err, 3
      err := NULL

      IF choice EQUALS 0
        exit := TRUE
      ELSE
        OUTPUT "Enter element number of food to be removed:"
        element := util inputInt <- none

        TRY
          fio passRemove <- (choice - 1), element
        CATCH IllegalArgumentException
          err := EXCEPTION MESSAGE
          exit := FALSE
        END TRYCATCH

        IF err IS NULL
          OUTPUT "Food removed successfully."
        END IF
      END ELSE
    WHILE NOT exit
  ELSE
    storageLackError <- none
  END ELSE
END SUBMODULE

SUBMODULE: displayContents
IMPORTS: none
EXPORTS: none
ALGORITHM:
  IF fio isLoaded <- none
    exit := FALSE

    DO
      choice := util menuSelect <- ("+|Display Contents|+" + NEWLINE +
        "Please select a location from below:" + NEWLINE +
        "[1] Freezer" + NEWLINE + "[2] Fridge" + NEWLINE +
        "[3] Pantry" + NEWLINE + "[0] Return to Main Menu"), err, 3
        array := NULL

      CASE choice
        0: exit := true
        1: array := fio passFreezer <- none
        2: array := fio passFridge <- none
        3: array := fio passPantry <- none
      END CASE

      IF ARRAY NOT NULL
        printElements(array)
      END IF
    WHILE NOT exit
  ELSE
    storageLackError <- none
  END ELSE
END SUBMODULE

SUBMODULE: printElements
IMPORTS: array (Array of objects)
EXPORTS: none
ALGORITHM:
  element := 0

  FOR i := 0 TO LENGTH OF array INC i
    IF array[i] NOT NULL
      INC element
      OUTPUT element + ": " + array[i] toString <- none
    END IF
  END FOR

  IF LENGTH OF array EQUALS 0 OR element EQUALS 0
    OUTPUT "+|No elements found.|+"
  END IF
END SUBMODULE

SUBMODULE: findExpired
IMPORTS: none
EXPORTS: none
ALGORITHM:
  IF fio isLoaded <- none
    exit := FALSE
    choice := util menuSelect <- ("+|Find Expired|+" + NEWLINE +
      "Please select a menu option from below:" + NEWLINE +
      "[1] Find Expired" + NEWLINE + "[0] Return to Main Menu"), null, 1

    IF choice EQUALS 1
      fridge := fio passFridge <- none
      pantry := fio passPantry <- none
      freezer := fio passFreezer <- none

      OUTPUT "+|Freezer: " + printExpired <- freezer
      OUTPUT "+|Fridge: " + printExpired <- fridge
      OUTPUT "+|Pantry: " + printExpired <- pantry
    END IF
  ELSE
    storaeLackError <- none
  END ELSE
END SUBMODULE

SUBMODULE: printExpired
IMPORTS: array (Array of Food objects)
ALGORITHM:
  elementAt := 0

  FOR i := 0 TO LENGTH OF array INC i
    IF array[i] NOT NULL
      INC elementAt
      IF array[i] calcExpiry <- none
        OUTPUT elementAt + ": " + array[i] toString <- none
      END IF
    END IF
  END FOR
END SUBMODULE

SUBMODULE: readIn
IMPORTS: none
EXPORTS: none
ALGORITHM:
  IF NOT fio isLoaded <- none
    exit := false
    skippedLines := 0

    DO
    choice := util menuSelect <- ("+|Read IN Storage|+" + NEWLINE +
      "Please select a menu option from below:" + NEWLINE +
      "[1] Load from File" + NEWLINE + "[0] Return to Main Menu"), err, 1
      err := NULL

      CASE choice
        0: exit := TRUE
        1: input := util inputString <- "Please input filename:"

          TRY
            skippedLines := fio parseFile <- input
            exit := TRUE
          CATCH Exception
            err := EXCEPTION MESSAGE
            exit := false
          END TRYCATCH
      END CASE
    WHILE NOT exit

    IF fio isLoaded <- none
      OUTPUT "File load complete." + NEWLINE + skippedLines +
        " elements skipped due to errors."
    END IF
  ELSE
    storagePresentError <- none
  END ELSE
END SUBMODULE

SUBMODULE: writeOut
IMPORTS: none
EXPORT: none
ALGORITHM:
  IF fio isLoaded
    exit := false

    DO
      IF err NOT NULL AND err EQUALS "" //if it worked last loop
        OUTPUT "File save complete."
      END IF

      choice := util menuSelect <- ("+|Write OUT Storage|+" + NEWLINE +
        "Please select a menu option from below:" + NEWLINE +
        "[1] Write to File" + NEWLINE + "[0] Return to Main Menu"), err, 1
      err := ""

      CASE choice
        0: exit := TRUE
        1: util inputString <- "Please input filename to write to:"

          TRY
            fio writeStorageCSV <- filename
          CATCH IOException
            err := EXCEPTION MESSAGE
            exit := FALSE
          END TRYCATCH
      END CASE
    WHILE NOT exit
  ELSE
    storageLackError <- none
  END ELSE
END SUBMODULE

SUBMODULE: storageLackError
IMPORTS: none
EXPORTS: none
ALGORITHM:
  OUTPUT "+|The storage facility has not been loaded.|+" + NEWLINE +
    "Please load the storage facility before attempting this task."
END SUBMODULE

SUBMODULE storagePresentError
IMPORTS: none
EXPORTS: none
ALGORITHM:
  OUTPUT "+|THe storage facility has already been loaded.|+" + NEWLINE +
    "Proceed with operation or restart to load a different facility"
END SUBMODULE
